// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a C4 community web.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//     INFO: For extending behaviour of each generated class create another partial 
//     class in same namespace (public partial class [ClassName] { })
//     Example: 
//     public partial class CentralUnit
//     {
//         public void Process(InputPacket packet) // extends the class with method
//         {
//         }
//
//         public void Command(OutputPacket packet) // extends the class with method
//         {
//         }
//     }
// </auto-generated>
// ------------------------------------------------------------------------------
using Gamanet.C4.SDK.Framework4.Device.Attributes;
using Gamanet.C4.SimpleInterfaces;
using Gamanet.C4.SDK.Enums.Devices;
using Gamanet.C4.SDK.Framework4.Device.Builder;
using Gamanet.C4.SimpleInterfaces.Repositories;
using System;

namespace Gamanet.C4.Driver.SimpleDriver.Devices
{
    [DeviceName("CentralUnit")]
    [DeviceTypeId("1c5c5716-195a-4ffd-8501-9836043a46c9", DeviceCategoryConst.CentralUnit)]
    [CanAddUnder(typeof(BusController))]
    [ProducesLog("ff529b27-9de1-490e-9fc2-19729a444e42")] // AuthenticationToDeviceFailed
    [ProducesLog("8aa223c5-80b4-49be-8f2b-1e94e2d39ad9")] // TimeDifferenceWarningTooBig
    [ProducesLog("df6198fd-9e95-4bdf-b9d3-2a17381b43ef")] // ConfigurationEnteredByTechnician
    [ProducesLog("2ab1583e-2c69-47b5-9eda-2adb8569577f")] // CommandFailed
    [ProducesLog("55cfa425-f594-45c6-9f24-2c0ec2727348")] // IncompatibleFirmwareVersionWithExpectedVersion
    [ProducesLog("38b45ec5-5a78-46d4-8f92-4e1a8e443728")] // IncompatibleFirmwareVersion
    [ProducesLog("2c2bc715-4ea4-4078-9291-53733f76428a")] // TamperRecovered
    [ProducesLog("c43d1a39-8d6f-42b2-a405-5762208e54c6")] // BatteryLowWarning
    [ProducesLog("415cade0-d28f-4ea3-b3cc-59c940aed0dc")] // InternalCommunicationError
    [ProducesLog("44cd10aa-80e0-44a8-812b-668882f1b9c4")] // FuseFailure
    [ProducesLog("8d19bb20-f5fb-402b-8399-690bbe8e8669")] // AuthenticationToDeviceFailedInvalidSecurityCertificate
    [ProducesLog("ff840116-375e-42fa-ab22-6cb854373e3d")] // CommunicationLost
    [ProducesLog("5025dbe1-706f-48d5-98a1-91209ac4592b")] // MainsFailureRecovered
    [ProducesLog("bf77d73f-1d99-45ff-b5bd-a1c6b103aa0b")] // JammingFailure
    [ProducesLog("da81009c-1aad-4101-93f9-a694f21eaed6")] // Tamper
    [ProducesLog("08b8cfc7-5eb6-45b3-b695-aceaecf56004")] // FuseFailureRestored
    [ProducesLog("348b9a95-0fa4-43bb-88b8-c13db607d920")] // AuthenticationToDeviceFailedInvalidPassword
    [ProducesLog("a5924f10-ce26-4f4e-9586-c4220f3ec17e")] // CommunicationRestored
    [ProducesLog("57a08563-1621-4b2d-9a43-c7f0171e89a9")] // JammingFailureRestored
    [ProducesLog("5486fd5b-5777-4476-b40e-d58136d2029c")] // MainsFailure
    [ProducesLog("688e866e-a762-4bb0-a8e2-d75d31b81c36")] // BatteryLowWarningRecovered
    [ProducesLog("4ea06864-bc5a-4741-9261-d9ad8bb544fc")] // DeviceRestarted
    [ProducesLog("98d22e70-6de9-4e58-ad1d-e4106548f170")] // ConfigurationExitedByTechnician
    [ProducesLog("5a8d7695-a512-4cd8-ad0e-eb9ac7fee0f0")] // InternalCommunicationErrorRestored
    [ProducesStatus("8f04cfb1-10bf-4778-902b-1778b7ad212a")] // SendingDeviceConfiguration
    [ProducesStatus("58390eda-38bf-43a0-ba33-48cc1750b831")] // Unknown
    [ProducesStatus("829e9918-56b1-4c31-b689-8097fe222c65")] // Idle
    [ProducesStatus("b776690d-7b10-45b6-ab79-817eaccb085c")] // LoadingDeviceConfiguration
    [ProducesStatus("b9283265-c4c8-4677-867d-5b8af6b79a68")] // Bypass
    [ProducesStatus("4af77e7d-90ec-4498-b3a1-3fd538492831")] // DownloadingHistory
    [ProducesStatus("498ff28a-69d9-44d7-8564-a6a9a64873c4")] // Alarm
    [ProducesStatus("aa437e24-42ef-4c67-8b30-68f8654ddf4d")] // Tamper
    [ProducesStatus("eb843b75-1e34-4588-96fd-12f00c4993c6")] // ConfigurationFailure
    [ProducesStatus("42e668f6-40be-4d51-972d-f24f6afbdbe3")] // Failure
    [ProducesStatus("72a463fd-8004-4196-a06c-f328f8db7f42")] // Disconnected
    [Licensed]
    public partial class CentralUnit : IDeviceBase
    {
        /// <summary>
        /// Gets the unique device type identifier.
        /// </summary>
        public static Guid DeviceTypeId { get; } = Guid.Parse("1c5c5716-195a-4ffd-8501-9836043a46c9");

        /// <summary>
        /// Unique Id of the device
        /// </summary>
        public Guid Id => SimpleDevice.Id;
        
        /// <summary>
        /// The data representation of device.
        /// </summary>
        public SimpleDeviceV1 SimpleDevice { get; private set; }

        /// <summary>
        /// The driver context.
        /// </summary>
        public IDriverContext DriverContext { get; private set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        /// <value>The Name.</value>
        public string Name { get; set; }
        
        /// <summary>
        /// Gets or sets the Description.
        /// </summary>
        /// <value>The Description.</value>
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the HardwareAddress.
        /// </summary>
        /// <value>The HardwareAddress.</value>
        [DeviceProperty(Category="", Required=true, Protected=false, PropertyBefore="", Regex=@"")]
        public System.String HardwareAddress { get; set; }

        /// <summary>
        /// Gets or sets the PollRate.
        /// </summary>
        /// <value>The PollRate.</value>
        [DeviceProperty(Category="", Required=false, Protected=false, PropertyBefore="", Regex=@"")]
        [System.ComponentModel.DefaultValue("00:00:05")]
        public System.TimeSpan PollRate { get; set; }

        /// <summary>
        /// Initializes this device.
        /// </summary>
        /// <param name="simpleDevice">The device data object.</param>
        /// <param name="driverContext">The driver context.</param>
        public void Initialize(SimpleDeviceV1 simpleDevice, IDriverContext driverContext)
        {
            SimpleDevice = simpleDevice;
            DriverContext = driverContext;

            OnInitialized(simpleDevice, driverContext);
        }

        /// <summary>
        /// Device was initialized, setup custom members if needed.
        /// </summary>
        partial void OnInitialized(SimpleDeviceV1 simpleDevice, IDriverContext driverContext);
    }
}