// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a C4 community web.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//     INFO: For extending behaviour of each generated class create another partial 
//     class in same namespace (public partial class [ClassName] { })
//     Example: 
//     public partial class Input
//     {
//         public void Process(InputPacket packet) // extends the class with method
//         {
//         }
//
//         public void Command(OutputPacket packet) // extends the class with method
//         {
//         }
//     }
// </auto-generated>
// ------------------------------------------------------------------------------
using Gamanet.C4.SDK.Framework4.Device.Attributes;
using Gamanet.C4.SimpleInterfaces;
using Gamanet.C4.SDK.Enums.Devices;
using Gamanet.C4.SDK.Framework4.Device.Builder;
using Gamanet.C4.SimpleInterfaces.Repositories;
using System;

namespace Gamanet.C4.Driver.SimpleDriver.Devices
{
    [DeviceName("Input")]
    [DeviceTypeId("69656ddb-37c6-4e3e-b42c-f7b44192263c", DeviceCategoryConst.Input)]
    [CanAddUnder(typeof(CentralUnit))]
    [ProducesLog("5e34a1e4-665c-48fe-a862-06ffe4bcbad7")] // Alarm
    [ProducesLog("2ab1583e-2c69-47b5-9eda-2adb8569577f")] // CommandFailed
    [ProducesLog("e5f9cec3-3e7c-401d-ac04-3e988f32d24e")] // AlarmRecovered
    [ProducesLog("2741eb67-4351-4803-b221-68867a8566aa")] // WarningRecovered
    [ProducesLog("aae50bb8-d89c-4e13-a460-8390563a9bca")] // Warning
    [ProducesLog("e45e495a-5dd6-4d95-bacc-9f40ec9423a2")] // DuplicateAddressDetected
    [ProducesLog("fb7660c1-080f-4c15-ab87-a0f86e4c6b46")] // Closed
    [ProducesLog("832cd291-87e6-4eb0-84e5-cb98988e9dec")] // Opened
    [ProducesStatus("367b86c5-4b5d-4748-b2fc-7ba2f8514e70")] // Activated
    [ProducesStatus("58390eda-38bf-43a0-ba33-48cc1750b831")] // Unknown
    [ProducesStatus("829e9918-56b1-4c31-b689-8097fe222c65")] // Idle
    [ProducesStatus("ac9a8470-59d6-43ec-9176-b11de1233339")] // FireAlarm
    [ProducesStatus("498ff28a-69d9-44d7-8564-a6a9a64873c4")] // Alarm
    [ProducesStatus("aa437e24-42ef-4c67-8b30-68f8654ddf4d")] // Tamper
    [ProducesStatus("eb843b75-1e34-4588-96fd-12f00c4993c6")] // ConfigurationFailure
    [ProducesStatus("42e668f6-40be-4d51-972d-f24f6afbdbe3")] // Failure
    public partial class Input : IDeviceBase
    {
        /// <summary>
        /// Gets the unique device type identifier.
        /// </summary>
        public static Guid DeviceTypeId { get; } = Guid.Parse("69656ddb-37c6-4e3e-b42c-f7b44192263c");

        /// <summary>
        /// Unique Id of the device
        /// </summary>
        public Guid Id => SimpleDevice.Id;
        
        /// <summary>
        /// The data representation of device.
        /// </summary>
        public SimpleDeviceV1 SimpleDevice { get; private set; }

        /// <summary>
        /// The driver context.
        /// </summary>
        public IDriverContext DriverContext { get; private set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        /// <value>The Name.</value>
        public string Name { get; set; }
        
        /// <summary>
        /// Gets or sets the Description.
        /// </summary>
        /// <value>The Description.</value>
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the HardwareAddress.
        /// </summary>
        /// <value>The HardwareAddress.</value>
        [DeviceProperty(Category="", Required=true, Protected=false, PropertyBefore="", Regex=@"")]
        public System.Byte HardwareAddress { get; set; }

        /// <summary>
        /// Initializes this device.
        /// </summary>
        /// <param name="simpleDevice">The device data object.</param>
        /// <param name="driverContext">The driver context.</param>
        public void Initialize(SimpleDeviceV1 simpleDevice, IDriverContext driverContext)
        {
            SimpleDevice = simpleDevice;
            DriverContext = driverContext;

            OnInitialized(simpleDevice, driverContext);
        }

        /// <summary>
        /// Device was initialized, setup custom members if needed.
        /// </summary>
        partial void OnInitialized(SimpleDeviceV1 simpleDevice, IDriverContext driverContext);
    }
}