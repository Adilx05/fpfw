// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a C4 community web.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//     INFO: For extending behaviour of each generated class create another partial 
//     class in same namespace (public partial class [ClassName] { })
// </auto-generated>
// ------------------------------------------------------------------------------
using Gamanet.C4.Driver.SimpleDriver.Helpers;
using Gamanet.C4.SDK.Enums.Logs;
using Gamanet.C4.SDK.Framework4.Device.Builder;
using Gamanet.C4.SimpleInterfaces;
using System;
using System.Collections.Generic;

namespace Gamanet.C4.Driver.SimpleDriver.Devices
{
    internal static partial class BusControllerExtensions
    {
        internal static void LogEvent (this IDeviceLogger devLog, 
                                       BusController device,
                                       Guid eventId,
                                       DateTime evtTime = default, 
                                       Dictionary<string, object> parameters = default)
        {
            var srcTime = DateTime.UtcNow;

            if (evtTime != default)
            {
                srcTime = evtTime;
            }
            else
            {
                if (device.DriverContext.TryGetService(out TimeService timeService))
                {
                    srcTime = timeService.Now;
                }
            }

            var log = new SimpleLogV1(Guid.NewGuid(), null, Guid.Empty, eventId)
            {
                Data = new Dictionary<string, object>
                {
                    ["DeviceId"] = device.SimpleDevice.Id,
                    ["SourceTime"] = srcTime
                }
            };

            if (parameters != null)
                foreach (var par in parameters)
                    log.Data.Add(par.Key, par.Value);
            
            device.DriverContext.SimpleClient.Logs.Create(log);
        }

        internal static void DriverConnectionLost(this IDeviceLogger devLog
                                           , BusController device
                                           , DateTime evtTime = default
                                           , System.String DeviceIdName = default
                                           , Dictionary<string, object> parameters = default)
        {
            var pars = new Dictionary<string, object>(parameters == default ? new Dictionary<string, object>() : parameters)
            {
            };

            if(DeviceIdName != default)
            {
                pars.Add(nameof(DeviceIdName), DeviceIdName);
            }
 
            LogEvent(devLog, device, LogCategory.DriverConnectionLost, evtTime, pars);
        }
        internal static void DeviceConfigurationRetrievalStarted(this IDeviceLogger devLog
                                           , BusController device
                                           , System.String Description                                      
                                           , System.Guid TransactionId                                      
                                           , DateTime evtTime = default
                                           , System.String DeviceIdName = default
                                           , Dictionary<string, object> parameters = default)
        {
            var pars = new Dictionary<string, object>(parameters == default ? new Dictionary<string, object>() : parameters)
            {
                { nameof(Description), Description },
                { nameof(TransactionId), TransactionId },
            };

            if(DeviceIdName != default)
            {
                pars.Add(nameof(DeviceIdName), DeviceIdName);
            }
 
            LogEvent(devLog, device, LogCategory.DeviceConfigurationRetrievalStarted, evtTime, pars);
        }
        internal static void DeviceConfigurationRetrievalFailed(this IDeviceLogger devLog
                                           , BusController device
                                           , System.String Description                                      
                                           , System.Guid TransactionId                                      
                                           , DateTime evtTime = default
                                           , System.String DeviceIdName = default
                                           , Dictionary<string, object> parameters = default)
        {
            var pars = new Dictionary<string, object>(parameters == default ? new Dictionary<string, object>() : parameters)
            {
                { nameof(Description), Description },
                { nameof(TransactionId), TransactionId },
            };

            if(DeviceIdName != default)
            {
                pars.Add(nameof(DeviceIdName), DeviceIdName);
            }
 
            LogEvent(devLog, device, LogCategory.DeviceConfigurationRetrievalFailed, evtTime, pars);
        }
        internal static void DeviceConfigurationRetrievalSuccessful(this IDeviceLogger devLog
                                           , BusController device
                                           , System.String Description                                      
                                           , System.Guid TransactionId                                      
                                           , DateTime evtTime = default
                                           , System.String DeviceIdName = default
                                           , Dictionary<string, object> parameters = default)
        {
            var pars = new Dictionary<string, object>(parameters == default ? new Dictionary<string, object>() : parameters)
            {
                { nameof(Description), Description },
                { nameof(TransactionId), TransactionId },
            };

            if(DeviceIdName != default)
            {
                pars.Add(nameof(DeviceIdName), DeviceIdName);
            }
 
            LogEvent(devLog, device, LogCategory.DeviceConfigurationRetrievalSuccessful, evtTime, pars);
        }
        internal static void CommandFailed(this IDeviceLogger devLog
                                           , BusController device
                                           , System.Guid CommandId                                      
                                           , System.String Description                                      
                                           , System.Guid IssuerPersonId                                      
                                           , DateTime evtTime = default
                                           , System.String CommandIdName = default
                                           , System.String DeviceIdName = default
                                           , System.String IssuerPersonIdName = default
                                           , Dictionary<string, object> parameters = default)
        {
            var pars = new Dictionary<string, object>(parameters == default ? new Dictionary<string, object>() : parameters)
            {
                { nameof(CommandId), CommandId },
                { nameof(Description), Description },
                { nameof(IssuerPersonId), IssuerPersonId },
            };

            if(CommandIdName != default)
            {
                pars.Add(nameof(CommandIdName), CommandIdName);
            }
            if(DeviceIdName != default)
            {
                pars.Add(nameof(DeviceIdName), DeviceIdName);
            }
            if(IssuerPersonIdName != default)
            {
                pars.Add(nameof(IssuerPersonIdName), IssuerPersonIdName);
            }
 
            LogEvent(devLog, device, LogCategory.CommandFailed, evtTime, pars);
        }
        internal static void DriverConnectionRestored(this IDeviceLogger devLog
                                           , BusController device
                                           , System.Int32 RetriesCount                                      
                                           , DateTime evtTime = default
                                           , System.String DeviceIdName = default
                                           , Dictionary<string, object> parameters = default)
        {
            var pars = new Dictionary<string, object>(parameters == default ? new Dictionary<string, object>() : parameters)
            {
                { nameof(RetriesCount), RetriesCount },
            };

            if(DeviceIdName != default)
            {
                pars.Add(nameof(DeviceIdName), DeviceIdName);
            }
 
            LogEvent(devLog, device, LogCategory.DriverConnectionRestored, evtTime, pars);
        }
        internal static void DeviceConfigurationSendingStarted(this IDeviceLogger devLog
                                           , BusController device
                                           , System.String Description                                      
                                           , System.Guid TransactionId                                      
                                           , DateTime evtTime = default
                                           , System.String DeviceIdName = default
                                           , Dictionary<string, object> parameters = default)
        {
            var pars = new Dictionary<string, object>(parameters == default ? new Dictionary<string, object>() : parameters)
            {
                { nameof(Description), Description },
                { nameof(TransactionId), TransactionId },
            };

            if(DeviceIdName != default)
            {
                pars.Add(nameof(DeviceIdName), DeviceIdName);
            }
 
            LogEvent(devLog, device, LogCategory.DeviceConfigurationSendingStarted, evtTime, pars);
        }
        internal static void DriverStopped(this IDeviceLogger devLog
                                           , BusController device
                                           , DateTime evtTime = default
                                           , System.String DeviceIdName = default
                                           , Dictionary<string, object> parameters = default)
        {
            var pars = new Dictionary<string, object>(parameters == default ? new Dictionary<string, object>() : parameters)
            {
            };

            if(DeviceIdName != default)
            {
                pars.Add(nameof(DeviceIdName), DeviceIdName);
            }
 
            LogEvent(devLog, device, LogCategory.DriverStopped, evtTime, pars);
        }
        internal static void DriverInitiated(this IDeviceLogger devLog
                                           , BusController device
                                           , DateTime evtTime = default
                                           , System.String DeviceIdName = default
                                           , Dictionary<string, object> parameters = default)
        {
            var pars = new Dictionary<string, object>(parameters == default ? new Dictionary<string, object>() : parameters)
            {
            };

            if(DeviceIdName != default)
            {
                pars.Add(nameof(DeviceIdName), DeviceIdName);
            }
 
            LogEvent(devLog, device, LogCategory.DriverInitiated, evtTime, pars);
        }
        internal static void DriverConnectedToDevice(this IDeviceLogger devLog
                                           , BusController device
                                           , DateTime evtTime = default
                                           , System.String DeviceIdName = default
                                           , Dictionary<string, object> parameters = default)
        {
            var pars = new Dictionary<string, object>(parameters == default ? new Dictionary<string, object>() : parameters)
            {
            };

            if(DeviceIdName != default)
            {
                pars.Add(nameof(DeviceIdName), DeviceIdName);
            }
 
            LogEvent(devLog, device, LogCategory.DriverConnectedToDevice, evtTime, pars);
        }
        internal static void DeviceConfigurationSendingFailed(this IDeviceLogger devLog
                                           , BusController device
                                           , System.String Description                                      
                                           , System.Guid TransactionId                                      
                                           , DateTime evtTime = default
                                           , System.String DeviceIdName = default
                                           , Dictionary<string, object> parameters = default)
        {
            var pars = new Dictionary<string, object>(parameters == default ? new Dictionary<string, object>() : parameters)
            {
                { nameof(Description), Description },
                { nameof(TransactionId), TransactionId },
            };

            if(DeviceIdName != default)
            {
                pars.Add(nameof(DeviceIdName), DeviceIdName);
            }
 
            LogEvent(devLog, device, LogCategory.DeviceConfigurationSendingFailed, evtTime, pars);
        }
        internal static void DriverConnectingToDevice(this IDeviceLogger devLog
                                           , BusController device
                                           , DateTime evtTime = default
                                           , System.String DeviceIdName = default
                                           , Dictionary<string, object> parameters = default)
        {
            var pars = new Dictionary<string, object>(parameters == default ? new Dictionary<string, object>() : parameters)
            {
            };

            if(DeviceIdName != default)
            {
                pars.Add(nameof(DeviceIdName), DeviceIdName);
            }
 
            LogEvent(devLog, device, LogCategory.DriverConnectingToDevice, evtTime, pars);
        }
        internal static void DeviceConfigurationSendingSuccessful(this IDeviceLogger devLog
                                           , BusController device
                                           , System.String Description                                      
                                           , System.Guid TransactionId                                      
                                           , DateTime evtTime = default
                                           , System.String DeviceIdName = default
                                           , Dictionary<string, object> parameters = default)
        {
            var pars = new Dictionary<string, object>(parameters == default ? new Dictionary<string, object>() : parameters)
            {
                { nameof(Description), Description },
                { nameof(TransactionId), TransactionId },
            };

            if(DeviceIdName != default)
            {
                pars.Add(nameof(DeviceIdName), DeviceIdName);
            }
 
            LogEvent(devLog, device, LogCategory.DeviceConfigurationSendingSuccessful, evtTime, pars);
        }
        internal static void DriverStarted(this IDeviceLogger devLog
                                           , BusController device
                                           , DateTime evtTime = default
                                           , System.String DeviceIdName = default
                                           , Dictionary<string, object> parameters = default)
        {
            var pars = new Dictionary<string, object>(parameters == default ? new Dictionary<string, object>() : parameters)
            {
            };

            if(DeviceIdName != default)
            {
                pars.Add(nameof(DeviceIdName), DeviceIdName);
            }
 
            LogEvent(devLog, device, LogCategory.DriverStarted, evtTime, pars);
        }
        internal static void DriverStartFailure(this IDeviceLogger devLog
                                           , BusController device
                                           , DateTime evtTime = default
                                           , System.String DeviceIdName = default
                                           , Dictionary<string, object> parameters = default)
        {
            var pars = new Dictionary<string, object>(parameters == default ? new Dictionary<string, object>() : parameters)
            {
            };

            if(DeviceIdName != default)
            {
                pars.Add(nameof(DeviceIdName), DeviceIdName);
            }
 
            LogEvent(devLog, device, LogCategory.DriverStartFailure, evtTime, pars);
        }
        internal static void ConfigurationErrorInvalidPropertyValue(this IDeviceLogger devLog
                                           , BusController device
                                           , System.String PropertyName                                      
                                           , DateTime evtTime = default
                                           , System.String DeviceIdName = default
                                           , Dictionary<string, object> parameters = default)
        {
            var pars = new Dictionary<string, object>(parameters == default ? new Dictionary<string, object>() : parameters)
            {
                { nameof(PropertyName), PropertyName },
            };

            if(DeviceIdName != default)
            {
                pars.Add(nameof(DeviceIdName), DeviceIdName);
            }
 
            LogEvent(devLog, device, LogCategory.ConfigurationErrorInvalidPropertyValue, evtTime, pars);
        }
    }
}