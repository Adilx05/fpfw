// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a C4 community web.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//     INFO: For extending behaviour of each generated class create another partial 
//     class in same namespace (public partial class [ClassName] { })
// </auto-generated>
// ------------------------------------------------------------------------------
using Gamanet.C4.Driver.SimpleDriver.Helpers;
using Gamanet.C4.SDK.Enums.Logs;
using Gamanet.C4.SDK.Framework4.Device.Builder;
using Gamanet.C4.SimpleInterfaces;
using System;
using System.Collections.Generic;

namespace Gamanet.C4.Driver.SimpleDriver.Devices
{
    internal static partial class CentralUnitExtensions
    {
        internal static void LogEvent (this IDeviceLogger devLog, 
                                       CentralUnit device,
                                       Guid eventId,
                                       DateTime evtTime = default, 
                                       Dictionary<string, object> parameters = default)
        {
            var srcTime = DateTime.UtcNow;

            if (evtTime != default)
            {
                srcTime = evtTime;
            }
            else
            {
                if (device.DriverContext.TryGetService(out TimeService timeService))
                {
                    srcTime = timeService.Now;
                }
            }

            var log = new SimpleLogV1(Guid.NewGuid(), null, Guid.Empty, eventId)
            {
                Data = new Dictionary<string, object>
                {
                    ["DeviceId"] = device.SimpleDevice.Id,
                    ["SourceTime"] = srcTime
                }
            };

            if (parameters != null)
                foreach (var par in parameters)
                    log.Data.Add(par.Key, par.Value);
            
            device.DriverContext.SimpleClient.Logs.Create(log);
        }

        internal static void AuthenticationToDeviceFailed(this IDeviceLogger devLog
                                           , CentralUnit device
                                           , DateTime evtTime = default
                                           , System.String DeviceIdName = default
                                           , Dictionary<string, object> parameters = default)
        {
            var pars = new Dictionary<string, object>(parameters == default ? new Dictionary<string, object>() : parameters)
            {
            };

            if(DeviceIdName != default)
            {
                pars.Add(nameof(DeviceIdName), DeviceIdName);
            }
 
            LogEvent(devLog, device, LogCategory.AuthenticationToDeviceFailed, evtTime, pars);
        }
        internal static void TimeDifferenceWarningTooBig(this IDeviceLogger devLog
                                           , CentralUnit device
                                           , System.TimeSpan TimeDiff                                      
                                           , DateTime evtTime = default
                                           , System.String DeviceIdName = default
                                           , Dictionary<string, object> parameters = default)
        {
            var pars = new Dictionary<string, object>(parameters == default ? new Dictionary<string, object>() : parameters)
            {
                { nameof(TimeDiff), TimeDiff },
            };

            if(DeviceIdName != default)
            {
                pars.Add(nameof(DeviceIdName), DeviceIdName);
            }
 
            LogEvent(devLog, device, LogCategory.TimeDifferenceWarningTooBig, evtTime, pars);
        }
        internal static void ConfigurationEnteredByTechnician(this IDeviceLogger devLog
                                           , CentralUnit device
                                           , DateTime evtTime = default
                                           , System.String DeviceIdName = default
                                           , Dictionary<string, object> parameters = default)
        {
            var pars = new Dictionary<string, object>(parameters == default ? new Dictionary<string, object>() : parameters)
            {
            };

            if(DeviceIdName != default)
            {
                pars.Add(nameof(DeviceIdName), DeviceIdName);
            }
 
            LogEvent(devLog, device, LogCategory.ConfigurationEnteredByTechnician, evtTime, pars);
        }
        internal static void CommandFailed(this IDeviceLogger devLog
                                           , CentralUnit device
                                           , System.Guid CommandId                                      
                                           , System.String Description                                      
                                           , System.Guid IssuerPersonId                                      
                                           , DateTime evtTime = default
                                           , System.String CommandIdName = default
                                           , System.String DeviceIdName = default
                                           , System.String IssuerPersonIdName = default
                                           , Dictionary<string, object> parameters = default)
        {
            var pars = new Dictionary<string, object>(parameters == default ? new Dictionary<string, object>() : parameters)
            {
                { nameof(CommandId), CommandId },
                { nameof(Description), Description },
                { nameof(IssuerPersonId), IssuerPersonId },
            };

            if(CommandIdName != default)
            {
                pars.Add(nameof(CommandIdName), CommandIdName);
            }
            if(DeviceIdName != default)
            {
                pars.Add(nameof(DeviceIdName), DeviceIdName);
            }
            if(IssuerPersonIdName != default)
            {
                pars.Add(nameof(IssuerPersonIdName), IssuerPersonIdName);
            }
 
            LogEvent(devLog, device, LogCategory.CommandFailed, evtTime, pars);
        }
        internal static void IncompatibleFirmwareVersionWithExpectedVersion(this IDeviceLogger devLog
                                           , CentralUnit device
                                           , System.String DriverFirmware                                      
                                           , DateTime evtTime = default
                                           , System.String DeviceFirmware = default
                                           , System.String DeviceIdName = default
                                           , Dictionary<string, object> parameters = default)
        {
            var pars = new Dictionary<string, object>(parameters == default ? new Dictionary<string, object>() : parameters)
            {
                { nameof(DriverFirmware), DriverFirmware },
            };

            if(DeviceFirmware != default)
            {
                pars.Add(nameof(DeviceFirmware), DeviceFirmware);
            }
            if(DeviceIdName != default)
            {
                pars.Add(nameof(DeviceIdName), DeviceIdName);
            }
 
            LogEvent(devLog, device, LogCategory.IncompatibleFirmwareVersionWithExpectedVersion, evtTime, pars);
        }
        internal static void IncompatibleFirmwareVersion(this IDeviceLogger devLog
                                           , CentralUnit device
                                           , System.String DeviceFirmware                                      
                                           , DateTime evtTime = default
                                           , System.String DeviceIdName = default
                                           , Dictionary<string, object> parameters = default)
        {
            var pars = new Dictionary<string, object>(parameters == default ? new Dictionary<string, object>() : parameters)
            {
                { nameof(DeviceFirmware), DeviceFirmware },
            };

            if(DeviceIdName != default)
            {
                pars.Add(nameof(DeviceIdName), DeviceIdName);
            }
 
            LogEvent(devLog, device, LogCategory.IncompatibleFirmwareVersion, evtTime, pars);
        }
        internal static void TamperRecovered(this IDeviceLogger devLog
                                           , CentralUnit device
                                           , DateTime evtTime = default
                                           , System.String DeviceIdName = default
                                           , Dictionary<string, object> parameters = default)
        {
            var pars = new Dictionary<string, object>(parameters == default ? new Dictionary<string, object>() : parameters)
            {
            };

            if(DeviceIdName != default)
            {
                pars.Add(nameof(DeviceIdName), DeviceIdName);
            }
 
            LogEvent(devLog, device, LogCategory.TamperRecovered, evtTime, pars);
        }
        internal static void BatteryLowWarning(this IDeviceLogger devLog
                                           , CentralUnit device
                                           , DateTime evtTime = default
                                           , System.String DeviceIdName = default
                                           , Dictionary<string, object> parameters = default)
        {
            var pars = new Dictionary<string, object>(parameters == default ? new Dictionary<string, object>() : parameters)
            {
            };

            if(DeviceIdName != default)
            {
                pars.Add(nameof(DeviceIdName), DeviceIdName);
            }
 
            LogEvent(devLog, device, LogCategory.BatteryLowWarning, evtTime, pars);
        }
        internal static void InternalCommunicationError(this IDeviceLogger devLog
                                           , CentralUnit device
                                           , DateTime evtTime = default
                                           , System.String Description = default
                                           , System.String DeviceIdName = default
                                           , Dictionary<string, object> parameters = default)
        {
            var pars = new Dictionary<string, object>(parameters == default ? new Dictionary<string, object>() : parameters)
            {
            };

            if(Description != default)
            {
                pars.Add(nameof(Description), Description);
            }
            if(DeviceIdName != default)
            {
                pars.Add(nameof(DeviceIdName), DeviceIdName);
            }
 
            LogEvent(devLog, device, LogCategory.InternalCommunicationError, evtTime, pars);
        }
        internal static void FuseFailure(this IDeviceLogger devLog
                                           , CentralUnit device
                                           , DateTime evtTime = default
                                           , System.String DeviceIdName = default
                                           , Dictionary<string, object> parameters = default)
        {
            var pars = new Dictionary<string, object>(parameters == default ? new Dictionary<string, object>() : parameters)
            {
            };

            if(DeviceIdName != default)
            {
                pars.Add(nameof(DeviceIdName), DeviceIdName);
            }
 
            LogEvent(devLog, device, LogCategory.FuseFailure, evtTime, pars);
        }
        internal static void AuthenticationToDeviceFailedInvalidSecurityCertificate(this IDeviceLogger devLog
                                           , CentralUnit device
                                           , DateTime evtTime = default
                                           , System.String DeviceIdName = default
                                           , Dictionary<string, object> parameters = default)
        {
            var pars = new Dictionary<string, object>(parameters == default ? new Dictionary<string, object>() : parameters)
            {
            };

            if(DeviceIdName != default)
            {
                pars.Add(nameof(DeviceIdName), DeviceIdName);
            }
 
            LogEvent(devLog, device, LogCategory.AuthenticationToDeviceFailedInvalidSecurityCertificate, evtTime, pars);
        }
        internal static void CommunicationLost(this IDeviceLogger devLog
                                           , CentralUnit device
                                           , DateTime evtTime = default
                                           , System.String DeviceIdName = default
                                           , Dictionary<string, object> parameters = default)
        {
            var pars = new Dictionary<string, object>(parameters == default ? new Dictionary<string, object>() : parameters)
            {
            };

            if(DeviceIdName != default)
            {
                pars.Add(nameof(DeviceIdName), DeviceIdName);
            }
 
            LogEvent(devLog, device, LogCategory.CommunicationLost, evtTime, pars);
        }
        internal static void MainsFailureRecovered(this IDeviceLogger devLog
                                           , CentralUnit device
                                           , DateTime evtTime = default
                                           , System.String DeviceIdName = default
                                           , Dictionary<string, object> parameters = default)
        {
            var pars = new Dictionary<string, object>(parameters == default ? new Dictionary<string, object>() : parameters)
            {
            };

            if(DeviceIdName != default)
            {
                pars.Add(nameof(DeviceIdName), DeviceIdName);
            }
 
            LogEvent(devLog, device, LogCategory.MainsFailureRecovered, evtTime, pars);
        }
        internal static void JammingFailure(this IDeviceLogger devLog
                                           , CentralUnit device
                                           , DateTime evtTime = default
                                           , System.String DeviceIdName = default
                                           , Dictionary<string, object> parameters = default)
        {
            var pars = new Dictionary<string, object>(parameters == default ? new Dictionary<string, object>() : parameters)
            {
            };

            if(DeviceIdName != default)
            {
                pars.Add(nameof(DeviceIdName), DeviceIdName);
            }
 
            LogEvent(devLog, device, LogCategory.JammingFailure, evtTime, pars);
        }
        internal static void Tamper(this IDeviceLogger devLog
                                           , CentralUnit device
                                           , DateTime evtTime = default
                                           , System.String DeviceIdName = default
                                           , Dictionary<string, object> parameters = default)
        {
            var pars = new Dictionary<string, object>(parameters == default ? new Dictionary<string, object>() : parameters)
            {
            };

            if(DeviceIdName != default)
            {
                pars.Add(nameof(DeviceIdName), DeviceIdName);
            }
 
            LogEvent(devLog, device, LogCategory.Tamper, evtTime, pars);
        }
        internal static void FuseFailureRestored(this IDeviceLogger devLog
                                           , CentralUnit device
                                           , DateTime evtTime = default
                                           , System.String DeviceIdName = default
                                           , Dictionary<string, object> parameters = default)
        {
            var pars = new Dictionary<string, object>(parameters == default ? new Dictionary<string, object>() : parameters)
            {
            };

            if(DeviceIdName != default)
            {
                pars.Add(nameof(DeviceIdName), DeviceIdName);
            }
 
            LogEvent(devLog, device, LogCategory.FuseFailureRestored, evtTime, pars);
        }
        internal static void AuthenticationToDeviceFailedInvalidPassword(this IDeviceLogger devLog
                                           , CentralUnit device
                                           , DateTime evtTime = default
                                           , System.String DeviceIdName = default
                                           , Dictionary<string, object> parameters = default)
        {
            var pars = new Dictionary<string, object>(parameters == default ? new Dictionary<string, object>() : parameters)
            {
            };

            if(DeviceIdName != default)
            {
                pars.Add(nameof(DeviceIdName), DeviceIdName);
            }
 
            LogEvent(devLog, device, LogCategory.AuthenticationToDeviceFailedInvalidPassword, evtTime, pars);
        }
        internal static void CommunicationRestored(this IDeviceLogger devLog
                                           , CentralUnit device
                                           , DateTime evtTime = default
                                           , System.String DeviceIdName = default
                                           , Dictionary<string, object> parameters = default)
        {
            var pars = new Dictionary<string, object>(parameters == default ? new Dictionary<string, object>() : parameters)
            {
            };

            if(DeviceIdName != default)
            {
                pars.Add(nameof(DeviceIdName), DeviceIdName);
            }
 
            LogEvent(devLog, device, LogCategory.CommunicationRestored, evtTime, pars);
        }
        internal static void JammingFailureRestored(this IDeviceLogger devLog
                                           , CentralUnit device
                                           , DateTime evtTime = default
                                           , System.String DeviceIdName = default
                                           , Dictionary<string, object> parameters = default)
        {
            var pars = new Dictionary<string, object>(parameters == default ? new Dictionary<string, object>() : parameters)
            {
            };

            if(DeviceIdName != default)
            {
                pars.Add(nameof(DeviceIdName), DeviceIdName);
            }
 
            LogEvent(devLog, device, LogCategory.JammingFailureRestored, evtTime, pars);
        }
        internal static void MainsFailure(this IDeviceLogger devLog
                                           , CentralUnit device
                                           , DateTime evtTime = default
                                           , System.String DeviceIdName = default
                                           , Dictionary<string, object> parameters = default)
        {
            var pars = new Dictionary<string, object>(parameters == default ? new Dictionary<string, object>() : parameters)
            {
            };

            if(DeviceIdName != default)
            {
                pars.Add(nameof(DeviceIdName), DeviceIdName);
            }
 
            LogEvent(devLog, device, LogCategory.MainsFailure, evtTime, pars);
        }
        internal static void BatteryLowWarningRecovered(this IDeviceLogger devLog
                                           , CentralUnit device
                                           , DateTime evtTime = default
                                           , System.String DeviceIdName = default
                                           , Dictionary<string, object> parameters = default)
        {
            var pars = new Dictionary<string, object>(parameters == default ? new Dictionary<string, object>() : parameters)
            {
            };

            if(DeviceIdName != default)
            {
                pars.Add(nameof(DeviceIdName), DeviceIdName);
            }
 
            LogEvent(devLog, device, LogCategory.BatteryLowWarningRecovered, evtTime, pars);
        }
        internal static void DeviceRestarted(this IDeviceLogger devLog
                                           , CentralUnit device
                                           , DateTime evtTime = default
                                           , System.String DeviceIdName = default
                                           , Dictionary<string, object> parameters = default)
        {
            var pars = new Dictionary<string, object>(parameters == default ? new Dictionary<string, object>() : parameters)
            {
            };

            if(DeviceIdName != default)
            {
                pars.Add(nameof(DeviceIdName), DeviceIdName);
            }
 
            LogEvent(devLog, device, LogCategory.DeviceRestarted, evtTime, pars);
        }
        internal static void ConfigurationExitedByTechnician(this IDeviceLogger devLog
                                           , CentralUnit device
                                           , DateTime evtTime = default
                                           , System.String DeviceIdName = default
                                           , Dictionary<string, object> parameters = default)
        {
            var pars = new Dictionary<string, object>(parameters == default ? new Dictionary<string, object>() : parameters)
            {
            };

            if(DeviceIdName != default)
            {
                pars.Add(nameof(DeviceIdName), DeviceIdName);
            }
 
            LogEvent(devLog, device, LogCategory.ConfigurationExitedByTechnician, evtTime, pars);
        }
        internal static void InternalCommunicationErrorRestored(this IDeviceLogger devLog
                                           , CentralUnit device
                                           , DateTime evtTime = default
                                           , System.String Description = default
                                           , System.String DeviceIdName = default
                                           , Dictionary<string, object> parameters = default)
        {
            var pars = new Dictionary<string, object>(parameters == default ? new Dictionary<string, object>() : parameters)
            {
            };

            if(Description != default)
            {
                pars.Add(nameof(Description), Description);
            }
            if(DeviceIdName != default)
            {
                pars.Add(nameof(DeviceIdName), DeviceIdName);
            }
 
            LogEvent(devLog, device, LogCategory.InternalCommunicationErrorRestored, evtTime, pars);
        }
    }
}