// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a C4 community web.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using Gamanet.C4.SDK.Framework4.Common.Extension;
using Gamanet.C4.SDK.Framework4.Communication;
using Gamanet.C4.SDK.Framework4.Device.Builder;
using Gamanet.C4.SimpleInterfaces;
using System;

namespace Gamanet.C4.Driver.SimpleDriver.Helpers
{
    /// <summary>
    /// Time Service: In case event from device does not contains event time information and you need to create C4 log, you need Now in local value of driver's TimeZone
    /// </summary>
    public partial class TimeService
    {
        // driver' time zone
        private readonly TimeZoneInfo _timeZone;

        /// <summary>
        /// Creates new isnstance of TimeService.
        /// </summary>
        /// <param name="timeZone">timezone (in case null passed, then UTC times will be used)</param>
        public TimeService(TimeZoneInfo timeZone)
        {
            _timeZone = timeZone;
        }

        /// <summary>
        /// Current time.
        /// </summary>
        public DateTime Now => ToLocal(DateTime.UtcNow);

        /// <summary>
        /// Converts local datetime value to UTC
        /// </summary>
        /// <param name="local">local time</param>
        /// <returns>UTC time</returns>
        public DateTime ToUtc(DateTime local) => local.Kind == DateTimeKind.Utc || _timeZone == null || _timeZone == TimeZoneInfo.Utc
                                                    ? local
                                                    : TimeZoneInfo.ConvertTimeToUtc(local, _timeZone);
        /// <summary>
        /// Converts UTC datetime value to Local
        /// </summary>
        /// <param name="utc">UTC time</param>
        /// <returns>local time</returns>
        public DateTime ToLocal(DateTime utc) => utc.Kind == DateTimeKind.Local || _timeZone == null || _timeZone == TimeZoneInfo.Utc
                                                    ? utc
                                                    : TimeZoneInfo.ConvertTimeFromUtc(utc, _timeZone);

         /// <summary>
        /// Finds TimeZoneDefinition from simple client
        /// time zone definition repository by id.
        /// Coverts time zone definition to TimeZoneInfo.
        /// </summary>
        /// <param name="timeZoneDefinitionId">TimeZoneDefinition unique id</param>
        /// <param name="client">SimpleClient</param>
        /// <returns>TimeZoneInfo object</returns>
        public static TimeZoneInfo GetTimeZoneInfo(Guid timeZoneDefinitionId, ISimpleClientV1 client)
        {
            if (timeZoneDefinitionId == Guid.Empty) // None
            {
                return TimeZoneInfo.Utc;
            }

            var tzDefinition = client.TimeZones.Get(timeZoneDefinitionId);
            if (tzDefinition.Id == Guid.Parse("89f31665-c9ce-4510-a3f4-5661d232bf62"))  // System Time
            {
                return TimeZoneInfo.Local;
            }

            return TimeZoneInfo.FromSerializedString(tzDefinition.Serialized);
        }
    }
}